"use strict";var util=require("util"),sinon=require("sinon"),sinonChai=require("sinon-chai"),chai=require("chai");chai.use(sinonChai);var assert=chai.assert,expect=chai.expect,should=chai.should(),GoogleTTS=require("../src/google-tts"),mocker=null,test={beforeEach:function(){mocker=sinon.sandbox.create(),this.inst=new GoogleTTS},afterEach:function(){mocker.restore()}};test.constructor={"no language":function(){var e=new GoogleTTS;expect(e.defaultLanguage).to.eql("en")},"language set":function(){var e=new GoogleTTS("fr");expect(e.defaultLanguage).to.eql("fr")}},test["default players"]=function(){var e=this;expect(e.inst._players[0]).to.be.instanceOf(GoogleTTS.HTML5Player),expect(e.inst._players[1]).to.be.instanceOf(GoogleTTS.SM2Player)},test.languages=function(){expect(this.inst.languages()).to.eql({af:"Afrikaans",sq:"Albanian",ar:"Arabic",hy:"Armenian",ca:"Catalan","zh-CN":"Mandarin (simplified)","zh-TW":"Mandarin (traditional)",hr:"Croatian",cs:"Czech",da:"Danish",nl:"Dutch",en:"English",eo:"Esperanto",fi:"Finnish",fr:"French",de:"German",el:"Greek",ht:"Haitian Creole",hi:"Hindi",hu:"Hungarian",is:"Icelandic",id:"Indonesian",it:"Italian",ja:"Japanese",ko:"Korean",la:"Latin",lv:"Latvian",mk:"Macedonian",no:"Norwegian",pl:"Polish",pt:"Portuguese",ro:"Romanian",ru:"Russian",sr:"Serbian",sk:"Slovak",es:"Spanish",sw:"Swahili",sv:"Swedish",ta:"Tamil",th:"Thai",tr:"Turkish",vi:"Vietnamese",cy:"Welsh"})},test["construct URLs"]={"empty text":function(){var e=this;expect(function(){e.inst.urls("")}).throws("Need some text")},"default language":function(){var e=this;e.inst.defaultLanguage="fr";var t=e.inst.urls("test");expect(t).to.eql(["http://translate.google.com/translate_tts?ie=UTF-8&tl=fr&q=test&textlen=4&idx=0&total=1"])},"non-default language":function(){var e=this;e.inst.defaultLanguage="fr";var t=e.inst.urls("test","en");expect(t).to.eql(["http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=test&textlen=4&idx=0&total=1"])},"slices at 100 characters":function(){var e=this,t=mocker.stub(e.inst,"_sliceInput",function(){return["abc","def"]}),n=e.inst.urls("test","en");expect(n).to.eql(["http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=abc&textlen=3&idx=0&total=2","http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=def&textlen=3&idx=1&total=2"]),t.should.have.been.calledOnce,t.should.have.been.calledWithExactly("test",100)}},test["slice input"]={empty:function(){var e=this,t=e.inst._sliceInput("",10);expect(t).to.eql([""])},"not more than max slice size":function(){var e=this,t=e.inst._sliceInput("1234567890",10);expect(t).to.eql(["1234567890"])},"more than max slice size":function(){var e=this,t=e.inst._sliceInput("12345678901234567890",10);expect(t).to.eql(["1234567890","1234567890"]),t=e.inst._sliceInput("1234567890123456789012345678",10),expect(t).to.eql(["1234567890","1234567890","12345678"])}};var DummyPlayer=function(e,t){var n=this;n.available=function(e){e(t)},n.play=function(e,t){t()},n.toString=function(){return e}};util.inherits(DummyPlayer,GoogleTTS.Player),test["add player"]={"invalid instance":function(){var e=this;expect(function(){e.inst.addPlayer("test")}).throws("Must be a instance of base Player class")},"valid instance":function(){var e=this,t=new DummyPlayer;e.inst.addPlayer(t),expect(e.inst._players[e.inst._players.length-1]).to.eql(t)}},test["get player"]={"checks cache first":function(e){var t=this;t.inst.availablePlayer="test",t.inst.getPlayer(function(t,n){return t?e(t):(expect(n).to.eql("test"),e(),void 0)})},"if no players available":{beforeEach:function(){var e=this;e.inst._players=[new DummyPlayer("p",!1)]},"returns empty":function(e){var t=this;t.inst.getPlayer(function(t,n){expect(n).to.be.undefined,e(t)})},"does not change cached value":function(e){var t=this;t.inst.availablePlayer="test",t.inst.getPlayer(function(n){expect(t.inst.availablePlayer).to.eql("test"),e(n)})}},"if players available":{beforeEach:function(){var e=this;e.inst._players=[new DummyPlayer("p1",!1),new DummyPlayer("p2",!0),new DummyPlayer("p3",!0)]},"returns first available":function(e){var t=this;t.inst.getPlayer(function(n,a){expect(a).to.eql(t.inst._players[1]),e(n)})},"sets cache":function(e){var t=this;t.inst.availablePlayer=void 0,t.inst.getPlayer(function(n,a){expect(t.inst.availablePlayer).to.eql(a),e(n)})}}},test["play audio"]={"error getting player":function(e){var t=this;mocker.stub(t.inst,"getPlayer",function(e){e(new Error("blah"))}),t.inst.play("test","en",function(t){expect(t.message).to.eql("blah"),e()})},"no player available":function(e){var t=this;mocker.stub(t.inst,"getPlayer",function(e){e()}),t.inst.play("test","en",function(t){expect(t.message).to.eql("No playback mechanism is available"),e()})},"gets URLs and plays them one-by-one":function(e){var t=this,n={play:mocker.spy(function(e,t){t()})};mocker.stub(t.inst,"getPlayer",function(e){e(null,n)}),mocker.stub(t.inst,"urls",function(){return["url1","url2"]}),t.inst.play("test","en",function(t){return t?e(t):(n.play.should.have.been.calledTwice,expect(n.play.getCall(0).args[0]).to.eql("url1"),expect(n.play.getCall(1).args[0]).to.eql("url2"),e(),void 0)})}},module.exports["Unit tests"]=test;